@{
    ViewBag.Title = "Index";
}
    
@using CultureEngine
@section styles
{
    @Styles.Render("~/Content/Home.css")
}
<div class="form-wrapper left">
    <select class="form-control" id="spec">
        <option value="noData">@LocalizationResx.PickSpeciality</option>
        <option value="pi">Програмная инженерия</option>
        <option value="ki">Компьютерная инженерия</option>
        <option value="ci">Системная инженерия</option>
    </select>
    <select class="form-control" id="quality">
        <option value="noData">@LocalizationResx.PickQuality</option>
        <option value="1">@LocalizationResx.QualityGood</option>
        <option value="0.8">@LocalizationResx.QualityMiddle</option>
        <option value="0.6">@LocalizationResx.QualityLow</option>
    </select>
    <a href="#" id="commit" class="btn btn-default">@LocalizationResx.Calculate</a>
</div>
<div id="chart-container">
    <div class="chartWrapper right">
        <div id="payments-container"></div>
    </div>


    <div class="chartWrapper right">
        <div id="summary-container"></div>
    </div>
</div>





@section Scripts
{
    @Scripts.Render("~/Scripts/chartsScript.js")
    @Scripts.Render("~/Scripts/Highcharts-4.0.1/js/highcharts.js")
    @Scripts.Render("~/Scripts/Highcharts-4.0.1/js/modules/exporting.js")
    @Scripts.Render("~/Scripts/bootstrap.min.js")   
    <script>

        function clone(destination, source) {
            for (var property in source) {
                if (typeof source[property] === "object" && source[property] !== null && destination[property]) {
                    clone(destination[property], source[property]);
                } else {
                    destination[property] = source[property];
                }
            }
        };

        $(function()
        {
            var textStrings = {
                paymentsCaption: "@LocalizationResx.PaymentsCaption",
                summaryCaption: "@LocalizationResx.SummaryCaption",
                paymentsAxis: '@LocalizationResx.PaymentsGraphCaption',
                summaryAxis: '@LocalizationResx.SummaryGraphCaption',
                xAxisCaption: '@LocalizationResx.xChartAxisCaption',
                yAxisCaption: '@LocalizationResx.yChartAxisCaption',
                Profit:'@LocalizationResx.Profit',
                Year: '@LocalizationResx.Year',
                Costs: '@LocalizationResx.Costs'
            };

            var noData = [{
                name: textStrings.paymentsAxis,
                data: [],
                color: "red"
                },
                {
                    name: textStrings.summaryAxis,
                    data: [],
                    color: "green"
                }];

            var valueTypes = { costs: textStrings.Costs, year: textStrings.Year, profit: textStrings.Profit };

            var specialities = {
                "ki": {},
                "pi": {},
                "ci": {}
            };
            
            $("#commit").on("click", function () {
                var selectedSpec;
                if ($("#spec").val() != "noData" || $("#quality").val() != "noData") {
                    var names = ["ki", "pi", "ci"];
                    selectedSpec = JSON.parse(JSON.stringify(specialities[$("#spec").val()]));
                    for (var i = selectedSpec[1].data.length; i--;) {
                        selectedSpec[1].data[i][0] *= $("#quality").val();
                    }

                    for (var i = selectedSpec[0].data.length; i--;) {
                        selectedSpec[0].data[i][0] *= $("#quality").val();
                    }
                    console.log(selectedSpec.data);
                }
                else selectedSpec = noData;
                

                drawCharts("#payments-container", selectedSpec, textStrings.paymentsCaption, textStrings.xAxisCaption, textStrings.yAxisCaption, valueTypes);
                drawCharts("#summary-container", selectedSpec, textStrings.summaryCaption, textStrings.xAxisCaption, textStrings.yAxisCaption, valueTypes);
            });
            
            specialities["pi"] = [{
                name: textStrings.paymentsAxis,
                data: [[1300, 0], [1400, 1], [1500, 2], [1500, 3], [1500, 4], [1500, 5]],
                color: "red",
            },
            {
                name: textStrings.summaryAxis,
                data: [[0, 0], [0, 1], [800, 2], [3000, 3], [5000, 4], [7000, 5]],
                color: "green",
            }]



             specialities["ci"]  = [{
                 name: textStrings.paymentsAxis,
                 data: [[1000, 1], [1000, 2], [1100, 3], [1000, 4], [1000, 5]],
                 color: "red"
             },
            {
                name: textStrings.summaryAxis,
                data: [[0, 1], [0, 2], [1200, 3], [2000, 4], [3000, 5]],
                color: "green"
            }]

             
             specialities["ki"] = [{
                 name: textStrings.paymentsAxis,
                 data: [[1200, 1], [1200, 2], [1200, 3], [1400, 4], [1400, 5]],
                 color: "red"
             },
            {
                name: textStrings.summaryAxis,
                data: [[0, 1], [1200, 2], [1700, 3], [2000, 4], [2500, 5]],
                color: "green"
            }]


             drawCharts("#payments-container", noData, textStrings.paymentsCaption, textStrings.xAxisCaption, textStrings.yAxisCaption, valueTypes);
             drawCharts("#summary-container", noData, textStrings.summaryCaption, textStrings.xAxisCaption, textStrings.yAxisCaption, valueTypes);
        })
    </script>
}